// Generated by gencpp from file robot_arm_hardware/RobotArmCmd.msg
// DO NOT EDIT!


#ifndef ROBOT_ARM_HARDWARE_MESSAGE_ROBOTARMCMD_H
#define ROBOT_ARM_HARDWARE_MESSAGE_ROBOTARMCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_arm_hardware
{
template <class ContainerAllocator>
struct RobotArmCmd_
{
  typedef RobotArmCmd_<ContainerAllocator> Type;

  RobotArmCmd_()
    : vel()
    , pos()  {
      vel.assign(0.0);

      pos.assign(0.0);
  }
  RobotArmCmd_(const ContainerAllocator& _alloc)
    : vel()
    , pos()  {
  (void)_alloc;
      vel.assign(0.0);

      pos.assign(0.0);
  }



   typedef boost::array<float, 6>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 6>  _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> const> ConstPtr;

}; // struct RobotArmCmd_

typedef ::robot_arm_hardware::RobotArmCmd_<std::allocator<void> > RobotArmCmd;

typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmCmd > RobotArmCmdPtr;
typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmCmd const> RobotArmCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator1> & lhs, const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator2> & rhs)
{
  return lhs.vel == rhs.vel &&
    lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator1> & lhs, const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_arm_hardware

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d5c067ef26721689a3bd1aab349074d";
  }

  static const char* value(const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d5c067ef2672168ULL;
  static const uint64_t static_value2 = 0x9a3bd1aab349074dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_arm_hardware/RobotArmCmd";
  }

  static const char* value(const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[6] vel #actuator vel\n"
"float32[6] pos #actuator position\n"
;
  }

  static const char* value(const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel);
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotArmCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_arm_hardware::RobotArmCmd_<ContainerAllocator>& v)
  {
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_ARM_HARDWARE_MESSAGE_ROBOTARMCMD_H
