// Generated by gencpp from file robot_arm_hardware/RobotArmState.msg
// DO NOT EDIT!


#ifndef ROBOT_ARM_HARDWARE_MESSAGE_ROBOTARMSTATE_H
#define ROBOT_ARM_HARDWARE_MESSAGE_ROBOTARMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_arm_hardware
{
template <class ContainerAllocator>
struct RobotArmState_
{
  typedef RobotArmState_<ContainerAllocator> Type;

  RobotArmState_()
    : vel()
    , pos()
    , encoder()  {
      vel.assign(0.0);

      pos.assign(0.0);

      encoder.assign(0.0);
  }
  RobotArmState_(const ContainerAllocator& _alloc)
    : vel()
    , pos()
    , encoder()  {
  (void)_alloc;
      vel.assign(0.0);

      pos.assign(0.0);

      encoder.assign(0.0);
  }



   typedef boost::array<float, 9>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 8>  _pos_type;
  _pos_type pos;

   typedef boost::array<float, 8>  _encoder_type;
  _encoder_type encoder;





  typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> const> ConstPtr;

}; // struct RobotArmState_

typedef ::robot_arm_hardware::RobotArmState_<std::allocator<void> > RobotArmState;

typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmState > RobotArmStatePtr;
typedef boost::shared_ptr< ::robot_arm_hardware::RobotArmState const> RobotArmStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_arm_hardware::RobotArmState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_arm_hardware::RobotArmState_<ContainerAllocator1> & lhs, const ::robot_arm_hardware::RobotArmState_<ContainerAllocator2> & rhs)
{
  return lhs.vel == rhs.vel &&
    lhs.pos == rhs.pos &&
    lhs.encoder == rhs.encoder;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_arm_hardware::RobotArmState_<ContainerAllocator1> & lhs, const ::robot_arm_hardware::RobotArmState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_arm_hardware

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d53385e21754d4b8e3401e31a5f53cfc";
  }

  static const char* value(const ::robot_arm_hardware::RobotArmState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd53385e21754d4b8ULL;
  static const uint64_t static_value2 = 0xe3401e31a5f53cfcULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_arm_hardware/RobotArmState";
  }

  static const char* value(const ::robot_arm_hardware::RobotArmState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[9] vel # actuator vel\n"
"float32[8] pos #position in degree\n"
"float32[8] encoder #encoder\n"
;
  }

  static const char* value(const ::robot_arm_hardware::RobotArmState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel);
      stream.next(m.pos);
      stream.next(m.encoder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotArmState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_arm_hardware::RobotArmState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_arm_hardware::RobotArmState_<ContainerAllocator>& v)
  {
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "encoder[]" << std::endl;
    for (size_t i = 0; i < v.encoder.size(); ++i)
    {
      s << indent << "  encoder[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.encoder[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_ARM_HARDWARE_MESSAGE_ROBOTARMSTATE_H
